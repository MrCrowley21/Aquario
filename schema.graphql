"""Projects main Query class, this will inherit multiple queries."""
type Query {
  users: [UserType]
  user(id: Int): UserType
  me: UserProfileType
  aquarium(id: Int): AquariumType
  fish: [FishType]
  fishType: [FishTypeWater]
  food: [FoodType]
  aquariumId: [AquariumIDs]
  aquariumSensors(aquariumId: Int): [AquariumSensors]
  feedingTime(aquariumId: String): [FeedingTime]
}

type UserType {
  id: ID!
  email: String!
}

type UserProfileType {
  user: UserType!
}

type AquariumType {
  id: ID!
  code: UserProfileType!
  aquariumId: String!
  nickname: String!
  fishId: [FishType!]!
  volume: Float!
  length: Float!
  width: Float!
  height: Float!
  feedingTime: Time!
  waterLevel: Float!
  generalSystemState: Float!
}

type FishType {
  id: ID!
  fishType: FishTypeWater!
  commonName: String!
  scientificName: String!
  foodId: FoodType!
}

type FishTypeWater {
  id: ID!
  waterType: String!
}

type FoodType {
  id: ID!
  foodType: String!
}

"""
The `Time` scalar type represents a Time value as
specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Time

type AquariumIDs {
  id: ID!
  code: UserProfileType!
  aquariumId: String!
  nickname: String!
}

type AquariumSensors {
  id: ID!
}

type FeedingTime {
  feedingTime: Time!
}

"""
Projects main Mutation class, this will
inherit multiple mutations.
"""
type Mutation {
  createUser(email: String!, password: String!): CreateUser

  """Obtain JSON Web Token mutation"""
  login(email: String!, password: String!): ObtainJSONWebToken
  verifyToken(token: String): Verify
  refreshToken(token: String): Refresh
  registerAquarium(aquariumId: String!, feedingTime: Time, fishId: Int, height: Int, length: Int, nickname: String!, volume: Int, width: Int): RegisterAquarium
  modifyAquarium(aquariumId: String!, feedingTime: Time, fishId: Int, nickname: String): ModifyAquariumData
}

type CreateUser {
  id: ID
}

"""Obtain JSON Web Token mutation"""
type ObtainJSONWebToken {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  token: String!
}

"""
The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar

type Verify {
  payload: GenericScalar!
}

type Refresh {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  token: String!
}

type RegisterAquarium {
  id: ID
  feedback: String
}

type ModifyAquariumData {
  id: ID
  feedback: String
}